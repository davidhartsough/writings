{"version":3,"sources":["webpack:///./src/components/LayoutHelmet.js","webpack:///./src/components/DarkModeToggle.js","webpack:///./src/components/layout.js","webpack:///./src/components/MarkdownHelmet.js","webpack:///./src/templates/markdown.js"],"names":["data","Helmet","lang","prefix","name","content","author","property","title","twitterSite","twitterCreator","rel","href","type","sizes","themeColorHex","color","DarkModeToggle","useState","dark","setDark","useEffect","window","localStorage","getItem","document","body","className","onClick","setItem","xmlns","width","height","viewBox","d","fill","children","query","render","LayoutHelmet","site","siteMetadata","description","keywords","url","image","authorUrl","meta","md","markdownRemark","MarkdownHelmet","frontmatter","baseKeywords","fields","slug","substring","to","date","dangerouslySetInnerHTML","__html","html"],"mappings":"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","file":"component---src-templates-markdown-js-b0190e87234435a906cf.js","sourcesContent":["import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nexport default ({ data }) => (\n  <Helmet>\n    <html lang=\"en\" prefix=\"og: http://ogp.me/ns#\" />\n    <meta name=\"author\" content={data.author} />\n    <meta property=\"og:locale\" content=\"en_US\" />\n    <meta property=\"og:site_name\" content={data.title} />\n    <meta name=\"twitter:card\" content=\"summary\" />\n    <meta name=\"twitter:site\" content={data.twitterSite} />\n    <meta name=\"twitter:creator\" content={data.twitterCreator} />\n    <meta name=\"mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"application-name\" content={data.title} />\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"apple-mobile-web-app-title\" content={data.title} />\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" />\n    <link\n      rel=\"icon\"\n      type=\"image/png\"\n      sizes=\"192x192\"\n      href=\"/android-chrome-192x192.png\"\n    />\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\" />\n    <meta name=\"msapplication-TileImage\" content=\"/mstile-144x144.png\" />\n    <meta name=\"msapplication-TileColor\" content={data.themeColorHex} />\n    <link\n      rel=\"mask-icon\"\n      href=\"/safari-pinned-tab.svg\"\n      color={data.themeColorHex}\n    />\n  </Helmet>\n)\n","import React, { useState, useEffect } from 'react'\nimport './toggle.css'\n\nexport default function DarkModeToggle() {\n  const [dark, setDark] = useState(true)\n  useEffect(() => {\n    if (window.localStorage.getItem('dark') === 'false') {\n      setDark(false)\n      document.body.className = 'light'\n    }\n  }, [])\n  function toggle() {\n    document.body.className = dark ? 'light' : ''\n    window.localStorage.setItem('dark', dark ? 'false' : 'true')\n    setDark(!dark)\n  }\n  return (\n    <button onClick={toggle} className=\"dark-mode-toggle\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        className=\"dark-mode-icon\"\n      >\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18V6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\" />\n      </svg>\n    </button>\n  )\n}\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport LayoutHelmet from './LayoutHelmet'\nimport DarkModeToggle from './DarkModeToggle'\nimport './base.css'\nimport './theme.css'\n\nexport default ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query LayoutQuery {\n        site {\n          siteMetadata {\n            title\n            author\n            image\n            imageAlt\n            twitterSite\n            twitterCreator\n            themeColorHex\n          }\n        }\n      }\n    `}\n    render={data => (\n      <main>\n        <LayoutHelmet data={data.site.siteMetadata} />\n        <DarkModeToggle />\n        <section>{children}</section>\n      </main>\n    )}\n  />\n)\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nexport default ({ data }) => (\n  <Helmet>\n    <title>{data.title} | David Hartsough</title>\n    <meta name=\"description\" content={data.description} />\n    <meta name=\"keywords\" content={data.keywords} />\n    <link rel=\"canonical\" href={data.url} />\n    <meta property=\"og:title\" content={data.title} />\n    <meta property=\"og:type\" content=\"article\" />\n    <meta property=\"og:url\" content={data.url} />\n    <meta property=\"og:description\" content={data.description} />\n    <script type=\"application/ld+json\">{`\n      {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"BlogPosting\",\n        \"name\": \"${data.title}\",\n        \"url\": \"${data.url}\",\n        \"headline\": \"${data.title}\",\n        \"keywords\": \"${data.keywords}\",\n        \"description\": \"${data.description}\",\n        \"image\": \"${data.image}\",\n        \"author\": {\n          \"@type\": \"Person\",\n          \"name\": \"${data.author}\",\n          \"url\": \"${data.authorUrl}\"\n        }\n      }\n    `}</script>\n  </Helmet>\n)\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport MarkdownHelmet from '../components/MarkdownHelmet'\n\nexport default ({ data }) => {\n  const meta = data.site.siteMetadata\n  const md = data.markdownRemark\n  return (\n    <Layout>\n      <MarkdownHelmet\n        data={{\n          title: md.frontmatter.title,\n          description: md.frontmatter.description,\n          keywords: `${meta.baseKeywords}${md.frontmatter.keywords}`,\n          url: `${meta.url}${md.fields.slug.substring(1)}`,\n          image: meta.image,\n          author: meta.author,\n          authorUrl: meta.authorUrl,\n        }}\n      />\n      <header>\n        <h1 className=\"heading\">{md.frontmatter.title}</h1>\n        <p className=\"subheading\">\n          by <Link to=\"/\">{meta.author}</Link>{' '}\n          <span className=\"date\">({md.frontmatter.date})</span>\n        </p>\n      </header>\n      <div dangerouslySetInnerHTML={{ __html: md.html }} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query MarkdownQuery($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        baseKeywords\n        image\n        authorUrl\n        url\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date\n        description\n        keywords\n      }\n      fields {\n        slug\n      }\n    }\n  }\n`\n"],"sourceRoot":""}